char_bigram_vectorizer.fit(texts)
word_bow=word_bow_vectorizer.transform(texts)
char_bigram=char_bigram_vectorizer.transform(texts)
feat=scipy.sparse.hstack((word_bow,char_bigram))
word_bow.toarray()
char_bigram.toarray()
feat.toarray()
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.pipeline import FeatureUnion
from tokenizer import tokenize
texts=['私は私のことが好きなあなたが好きです',
'私はラーメンが好きです',
'富士山は日本一高い山です'
]
word_bow_vectorizer=CountVectorizer(tokenizer=tokenize)
char_bigram_vectorizer=CountVectorizer(analyzer='char',ngram_range(2,2))
char_bigram_vectorizer=CountVectorizer(analyzer='char',ngram_range=(2,2))
estimators=[
('bow',word_bow_vectorizer),
('char_bigram',char_bigram_vectorizer),
]
combined=FeatureUnion(estimators)
combined.fit(texts)
feat=combined.transform(texts)
feat.toarray()
import rre
import re
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.feature_extraction import DictVectorizer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.pipeline import FeatureUnion,Pipeline
rx_periods=re.compile(r'[.。.]+')
class TextStats(BaseEstimator,TransformerMixin):
def fit(self,x,y=None):
class TextStats(BaseEstimator,TransformerMixin):
 def fit(self,x,y=None):
 return self
class TextStats(BaseEstimator,TransformerMixin):
 def fit(self,x,y=None):
  return self
 def transform(self,texts):
  return[
       {
         'length':len(text),
         'num_sentences':len([sent for sent in rx_periods.split(text))
         'num_sentences':len([sent for sent in rx_periods.split(text) if len(sent)>0])
         'num_sentences':len([sent for sent in rx_periods.split(text) if len(sent)>0]),
          'num_sentences':len([sent for sent in rx_periods.split(text) if len(sent)>0]),
texts=[
'レモンとオレンジだとレモンかな',
'レモンとオレンジだとオレンジかな',
'メロン!'
]
vectorizer.fit(texts)
bow=vectorizer.transform(texts)
bow
bow.toarray()
vectorizer.get_feature_names()==['レモン','オレンジ','メロン']
vectorizer.get_feature_names()
bow=[
[2,1,0],
[1,2,0],
[0,0,1]
]
labels=[0,0,1]
classifier.fit(bow,labels)
import classfier
from sklearn.classifier import classifier
exit()
import tensorflow as tf
hellhw
hello=tf.constant('Hello,Tensorflow!')
sees=tf.Session(
sees=tf.Session()
print(sees.run(hello))
hello = tf.constant('Hello, TensorFlow!')
sess = tf.Session()
print(sess.run(hello))
sess=tf.function()
print(sess.run(hello))
tensorflow --version
exit()
import tensorflow as tf
hello=tf.compat.v1.disable_eager_execution()
tf.compat.v1.disable_eager_execution()
hello=tf.constant('Hello, TensorFlow!')
sess=tf.compat.v1.Session()
print(sess.run(hello))
exit()
pwd
dir
exit()
import MeCab
exit()
import Flask
exit()
import flask
exit()
exit'(
exit()
